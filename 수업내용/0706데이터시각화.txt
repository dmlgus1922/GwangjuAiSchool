데이터 시각화

시각화를 통해 데이터 간의 상관관계를 파악하고 회귀, 분류 등의 처리를 할 수 있다.

**맷플랏립
그래프 스타일
plt.plot(x, color = '색깔', linestyle = '라인스타일', label)로 꾸밀 수 있다
plt.plot(x, c ='색깔', ls ='라인스타일')처럼 약어로 쓸 수도 있다.
plt.title('그래프 이름') => 그래프(축)의 이름을 지정한다.

fig, ax라는 변수를 그림, 축을 담을 때 주로 사용한다. 
fig = plt.figure()
fig.set_size_inches(10,10) => 그림의 크기 지정.
ax = fig.add_subplot(가로,세로,축의 위치) => 그래프를 한 그림에 여럿 그릴 때 쓴다.
ax.set_title('축의 이름') => 축의 이름을 지정한다.

plt.plot(Y,c='r', ls='dotted', marker = 'o', label='y_data') => 'o'모양의 마커와 라벨을 추가했다.
plt.plot(Y1 ,c='g', ls='dashed', label='y1_data')
plt.legend() => 적절한 위치에 범례를 만들어 라벨, 선의 모양 등을 나타낸다.
 - 파라미터로 loc ='방향(왼, 오, 위, 아래)' 위치 설정이 가능하다.
plt.title('y=wx+b') => 축 이름 설정
plt.xlabel('x_data') => 축 가로 이름
plt.ylabel('y_ck') => 축 세로 이름
plt.show()

점 그래프는 plt.scatter로 사용한다.

n = 50 => 임의의 숫자.
x = np.random.rand(n) #0이상 1미만 랜덤숫자 50개
y = np.random.rand(n)
c = np.random.rand(n)
ar = np.pi * (15*c)**2  => 랜덤한 원의 크기를 담은 배열이다.
plt.scatter(x,y, c=c, s=ar, alpha=0.5) => s파라미터로 원의 크기를, alpha파라미터로 투명도를 설정했다.
plt.show()

막대 그래프는 plt.bar로 사용한다.
plt.bar() width 파라미터로 막대의 폭을 조절할 수 있다.

plt.xticks() x축의 값을 지정할 수 있다.

히스토그램 또한 그릴 수 있으며 plt.hist()의 형태로 사용한다.
파라미터 bins를 변경해 가로축의 크기(?)를 조절한다

plt.boxplot()으로 상자 수염 그림을 그릴 수 있다.


**시본 seaborn
맷플롯립을 바탕으로 다양한 함수 사용을 돕는 일종의 래퍼 모듈이다.
보통 sns로 사용한다.
- lineplot(선), scatterplot(산점도), regplot(회귀 그래프), countplot(비교그래프), barplot(막대그래프) 등의 그림을 그릴 수 있다.
- 바이올린플롯(상자그림과 분포도를 한번에 나타낸다.), 스웜플롯(바이올린 플롯과 같은 형태에서 산점도로 표현) 
- rugplot: 밀도를 보기 좋다.. kdeplot: 밀도가 선형으로 나타난다.
- sns.distplot(x, kde = True, rug = True) rug와 kde 플랏을 히스토그램과 함께 나타내준다.
- from seaborn.axisgrid import jointplot => jointplot을 import 해줌.
	sns.jointplot(x, y, data) => 데이터 간의 관계성을 보여준다.
-pairplot: 각각의 피쳐끼리의 연관성을 나타내준다. 


**판다스의 피벗 테이블
데이터프레임.pivot_table(index, column)과 같이 사용한다.
sns.heatmap(data, annot = True, fmt = 'd') 피벗테이블을 시각화하여 보여준다. 
	- annot은 값을 나타낼지, fmt는 숫자의 형태를 정해준다.
	- linewidths로 공간 사이에 선을 그을 수도 있다.
