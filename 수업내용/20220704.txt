파이참, 아나콘다 설치 후 세팅을 함

i) 데이터의 분류

연속형 데이터: 값이 끊어지지 않는다. 아날로그 데이터
 - 온도, 자동차의 속도 등. 아날로그 시계로 이해하면 편하다.
 - 일반적인 실수나 정수 값. 범위(스케일)가 있다.


이산형 데이터: 연속적 값이 아닌 분리해서 표현하는 데이터. 디지털 테이터
 - 우편번호, 성별 등. 디지털 시계로 이해하면 편하다.
 - 라벨로 구분되는 값. 범위가 없다.

이산형 데이터:
1. 숫자형 데이터: 
2. 명목형 데이터
3. 서수형 데이터: 범주형 데이터의 일종, 데이터 간에 순서가 있다. ex) 어떤 물체의 크기 대/중/소

데이터의 형식
 csv xlsx 
 트리형태json xml pickle h54


ii) numpy
파이썬의 기본 리스트는 기계학습에서 충분하지 않다.
데이터를 처리할 때 리스트 간의 연산이 필요한데 파이썬은 이를 지원하지 않기 때문.
더불어 연산 속도 또한 리스트보다 뛰어나다.
*numpy는 구성한 데이터 자료형으로만 담을 수 있다. 
 -간접적으로 데이터가 들어가는 파이썬 리스트에 반해 넘파이 배열은 데이터가 직접적을 들어가기 때문이다.
  ex) np.array([1,2,3,'a']) 불가능
 -행렬의 데이터 처리에 많이 쓰인다.
 -C와 유사한 형태로 메모리를 관리하며 같은 연산속도로 계산할 수 있다.
 -동적타이핑을 포기했지만 배열 연산에 큰 우위를 가지고 있다.

텐서: 선형대수의 데이터 배열
0 스칼라
1 벡터
2 행렬
3 3차원 텐서
n n차원 텐서

벡터와 벡터의 연산에는 반드시 크기가 같아야 한다.
ex) 
a1 = np.array([1,2,3,4,5])
a2 = np.array([1,2,3,4])
a1 + a2 불가능

파이썬 리스트는 고차원 우선, 넘파이는 저차원 우선이라 말할 수 있다.
같은 차원의 배열의 크기는 같아야 한다. 


넘파이 array메소드는 데이터의 자료형을 기본적으로 넘겨줘서 배열을 만들지만
매개변수에 변환할 자료형을 추가하면 그 자료형으로 변환해서 만들어준다.
더불어 각 데이터의 클래스를 비교해 범주가 더 큰 자료형으로 통일해 바꿔준다.
ex)
 numpy.array([1, 1.1]) => [1. 1.1]
 numpy.array([1, 1.1, '1']) => ['1' '1.1' '1']

iii) 넘파이 활용 알아보기
ex) x = numpy.array([1,2,3,4])
x.dtype => 데이터 타입, int32
x.shape => 각 차원 원소의 개수, (4,)
x.ndim => 최대 차원, 1
x.size => 원소의 개수, 4 
x.itemsize => 원소의 공간, 4 (int라서)
x.reshape(2,2) => 배열 모양 재배치 [[1,2], [3,4]]

 인덱스, 슬라이싱
x = numpy.array([[1,2,3,4],[5,6,7,8]])
x[0][0] == x[0,0] => 1
x[::2,::2] => (1, 3)

numpy.zeros((2,2)) => [[0,0],[0,0]]
numpy.ones((2,2)) => [[1,1],[1,1]]
numpy.empty((2,2)) => 임의의 값을 2,2 형태로 채워준다.

x = numpy.arange(1,13).reshape(3,4) => 1부터 12까지 3,4 형태로 채워준다.
x.sum() => axis는 기본값이 0이고 기준이 되는 축으로 sum연산을 한다. 

x = np.array([[1,2,3]])
y = np.array([[1],[2],[3]])
numpy.vstack((x.T, y)) => [[1],[2],[3],[1],[2],[3]] 세로로 쌓는다고 생각하면 편하다.
numpy.hstack((x, y.T)) => [[1,1], [2,2], [3,3]] 가로로 붙인다고 생각하면 편하다.

v1 = np.array([1,2,3,4]).reshape(2,2) => [[1,2],[3,4]]
v2 = np.array([[5,6]])
print(v1.shape, v2.shape)
print(np.concatenate((v1,v2.T),axis = 1)) => [[1,2,5],[3,4,6]] 축을 기준으로 원소를 붙여준다.
